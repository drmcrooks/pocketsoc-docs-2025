{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PocketSOC Documentation","text":"<p>Welcome to the official documentation for PocketSOC. PocketSOC is a SOC training platform that leverages open-source tools such as Docker, Portainer, Zeek, MISP, OpenSearch, Logstash to deploy Security Operation Center (SOC) training environment, referred to as PocketSOC.</p> <p>The tools and technologies mentioned - Docker, Portainer, Zeek, MISP, OpenSearch, Logstash are commonly used in cybersecurity and SOC environments.</p> <p>All of these components run as Docker Containers on a VM which provides one instance of PocketSOC for a trainee. Attendees interact with their PocketSOC instance using Portainer, which runs on each VM and provides a web UI to interact with each of the containers running on a host.</p> <p>A head node, running on one VM, is used as the main or controller node of the PocketSOC. It uses Ansible to run these Docker containers on X Managed nodes. </p>"},{"location":"#overview","title":"Overview","text":"<p>This documentation will guide you through:</p> <ul> <li>Setting up the environment.</li> <li>Installation and configuration.</li> <li>Deployment for admin.</li> <li>Access for the trainee.</li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    Admin/\n        deployment.md\n        design.md \n    Trainees/\n        access.md\n        excercise_one.md\n        excercise_two.md\n        excercise_three.md\n        excercise_four.md\n        excercise_five.md\n        excercise_six.md\n        images/\n        ...   # All the images      \n    ...       # Other pages, images and files.\n</code></pre>"},{"location":"#about","title":"About","text":"<p>As part of improving STFC\u2019s cybersecurity posture, the SOC is being set up to address network traffic monitoring capability shortfalls. Since this project was spawned from the Tier-1, and the Tier-1 is part of the Worldwide LHC Computing Grid (WLCG), this is a key forum for us through which knowledge on security in research computing is shared. Security is often a part of this - in fact there is a specific Thematic CERN School of Computing (tCSC) dedicated to security. At tCSC there is a section on SOCs, and PocketSOC is the tool used to give trainees a dedicated training environment.</p>"},{"location":"Admin/deployment/","title":"Deployment Overview","text":"<p>The PocketSOC architecture includes several key components:</p> <ul> <li>Portainer: Provides a web-based UI for managing docker containers.</li> <li>MISP: Threat Intelligence platform that allows collecting and sharing threat information.</li> <li>Zeek: Network traffic analysis tool that monitors and logs network activity.</li> <li>Logstash: Data processing pipeline used for Log parsing and forwarding.</li> <li>OpenSearch: Search and analytics engine used for storing, searching, and analysing logs.</li> <li>Docker &amp; Docker Compose: Orchestrating the containers that run these services.</li> </ul> <p>PocketSOC is designed to be easily deployable using Docker and Ansible playbooks. </p>"},{"location":"Admin/deployment/#installation","title":"Installation","text":"<p>This section will cover the steps to install PocketSOC on your system.</p>"},{"location":"Admin/deployment/#preamble","title":"Preamble","text":"<ol> <li>Set up SSH keypair for the purpose of this deployment using <code>ssh-keygen</code>; when prompted enter a password </li> </ol> <p>Optionally choose a more meaningful name for this particular key, eg <code>id_training_rsa</code>; use this name in place of <code>id_rsa</code> going forward</p> <pre><code>- It will generate the private/public keypair in `~/.ssh` as `id_rsa &amp;&amp; id_rsa.pub`\n</code></pre>"},{"location":"Admin/deployment/#managed-nodes-initial","title":"Managed nodes - initial","text":"<ol> <li>Provision a set of VMs as managed nodes - Noting for each the node number and FQDN</li> </ol> <p>STFC Cloud:      - Use type <code>l3.micro</code>     - You can upload the public key of the dedicated keypair you generated for this purpose at this stage     - If you create multiple hosts in one step, the <code>count</code> setting will append <code>-N</code> to each hostname</p> <ol> <li>Ensure the <code>~/.ssh/authorized_keys</code> includes head node public key on each node if not provisioned as above</li> </ol>"},{"location":"Admin/deployment/#head-node","title":"Head node","text":"<ol> <li>Provision a VM from your openstack environment which will be used as a head node</li> </ol> <p>STFC Cloud: Use type <code>l3.nano</code></p> <ol> <li> <p>Log into host as standard user. </p> </li> <li> <p>Install ansible and git</p> </li> </ol> <p><code>sudo dnf install ansible git -y</code></p> <ol> <li>Make sure that the keypair generated above is present in <code>~/.ssh/</code></li> </ol>"},{"location":"Admin/deployment/#set-up-haproxy-node","title":"Set up haproxy node","text":"<ol> <li>Provision a VM from your openstack environment which will be used as a haproxy node</li> </ol> <p>STFC Cloud: Use type <code>l3.nano</code></p> <ol> <li> <p>Generate a certificate for your HAProxy instance</p> </li> <li> <p>For a self-signed cert for testing, you can use the following for example</p> </li> </ol> <pre><code>sudo mkdir -p /opt/pocketsoc/certs/\ncd /opt/pocketsoc/certs/\nsudo openssl req -x509 -newkey rsa:4096 -keyout key.pem -out certificate.pem -days 365 -nodes\nsudo cat key.pem &gt;&gt; certificate.pem # This may need to be done as root\n</code></pre> <p>Example options UK [] Abingdon Security School 2025 [] haproxy []</p> <ul> <li>Cert will be available at <code>/opt/pocketsoc/certs/certificate.pem</code></li> </ul> <p>Test subject using <code>openssl x509 -in /opt/pocketsoc/certs/certificate.pem -noout -subject</code></p> <ol> <li>Install HAProxy</li> </ol> <pre><code>sudo dnf install haproxy -y\n</code></pre> <ol> <li> <p>Build your <code>haproxy.cfg</code> config file. In the following example, we're using an example structure of 4XX0Y for the training node ports</p> </li> <li> <p>XX: training node number</p> </li> <li>Y: service port</li> </ol> <p>4A. Common initial sections:</p> <pre><code>global\n    log /dev/log local0\n    log /dev/log local1 notice\n    maxconn 4096\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\n</code></pre> <p>4B. For each training node, need to configure ports with format <code>N001-N003</code> . First configure bind ports (where for example we have 40 training nodes). We're using the certificate location from the example above, update as appropriate.</p> <pre><code>frontend https_frontend\n    bind *:443 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:1001-1003 ssl crt /opt/pocketsoc/certs/certificate.pem\n...\n    bind *:40001-40003 ssl crt /opt/pocketsoc/certs/certificate.pem\n</code></pre> <p>4C. Config acls - need portainer, opensearch and misp for each node (again example of 40 nodes):</p> <pre><code>    acl portainer1 dst_port 40101\n...\n    acl portainer40 dst_port 44001\n\n    acl opensearch1 dst_port 40102\n...\n    acl opensearch40 dst_port 44002\n\n    acl misp1 dst_port 40103\n...\n    acl misp40 dst_port 44003\n</code></pre> <p>4D. Set up <code>use_backend</code> rules</p> <pre><code>    use_backend portainer1 if portainer1\n...\n    use_backend portainer40 if portainer40\n\n    use_backend opensearch1 if opensearch1\n...\n    use_backend opensearch40 if opensearch40\n\n    use_backend misp1 if misp1\n...\n    use_backend misp40 if misp40\n</code></pre> <p>4E. Set up backends (here you need the fqdns of the training nodes). NOTE the port number for the MISP backends must match the individual ports as defined above</p> <pre><code>default_backend default\n\nbackend portainer1\n    server portainer_node1 &lt;NODE1_FQDN&gt;:9443 check ssl verify none\n\n...\n\nbackend portainer40\n    server portainer_node40 &lt;NODE40_FQDN&gt;:9443 check ssl verify none\n\nbackend opensearch1\n    server opensearch_node1 &lt;NODE1_FQDN&gt;:5601 check ssl verify none\n\n...\n\nbackend opensearch40\n    server opensearch_node40 &lt;NODE40_FQDN&gt;:5601 check ssl verify none\n\nbackend misp1\n    server misp_node1 &lt;NODE1_FQDN&gt;:40103 check ssl verify none\n\n...\n\nbackend misp40\n    server misp_node40 &lt;NODE1_FQDN&gt;:44003 check ssl verify none \n</code></pre> <p>4F. Include default deny</p> <pre><code>backend default\n    http-request deny\n</code></pre> <p>4G. A complete version of this config will be included at the end for 40 training nodes.</p> <ol> <li> <p>Copy this configuration to <code>/etc/haproxy/haproxy.cfg</code></p> </li> <li> <p>Ensure that the appropriate ports are available</p> </li> <li> <p>Start <code>haproxy</code>: <code>sudo systemctl enable haproxy &amp;&amp; sudo systemctl start haproxy</code></p> </li> </ol>"},{"location":"Admin/deployment/#deploy","title":"Deploy","text":"<ol> <li> <p>On head node, in normal user area clone the Ansible repository <code>git clone https://github.com/drmcrooks/pocketsoc-ng-2025-ansible</code></p> </li> <li> <p><code>cd pocketsoc-ng-ansible</code></p> </li> <li> <p>Create or edit <code>inventory.ini</code> file and include your hosts/nodes.</p> </li> </ol> <pre><code>[trainingvms]\nnode-1 ansible_host=&lt;node1_ip&gt; misp_port=40103\nnode-2 ansible_host=&lt;node2_ip&gt; misp_port=40203\nnode-3 ansible_host=&lt;node3_ip&gt; misp_port=40303\n...\nnode-4 ansible_host=&lt;node4_ip&gt; misp_port=44003\n</code></pre> <ol> <li>Create or edit <code>pocketsoc-ng_var.env</code> and include global variables. </li> </ol> <pre><code>---\n# Variables\nsalt: \"${RANDOM}\"\nadmin_password_command: \"openssl rand -base64 32\"\nhaproxy_fqdn: \"${HAPROXY_FQDN}\"\n</code></pre> <ol> <li>Start the ssh-agent using dedicated training keypair</li> </ol> <pre><code>eval \"$(ssh-agent -s)\"  &amp;&amp;ssh-add ~/.ssh/id_training_rsa\n</code></pre> <p>OPTIONAL Create an alias for setting up ssh agent like this</p> <pre><code>alias ssha='eval $(ssh-agent -s) &amp;&amp; ssh-add ~/.ssh/id_rsa'\n</code></pre> <ol> <li>Make sure that the SSH fingerprints of the training nodes are stored.</li> </ol> <pre><code>ssh-keyscan -H $node1_ip &gt;&gt; ~/.ssh/known_hosts\nssh-keyscan -H $node2_ip &gt;&gt; ~/.ssh/known_hosts\nssh-keyscan -H $node3_ip &gt;&gt; ~/.ssh/known_hosts\n</code></pre> <ol> <li>Ping to see the connection with the nodes.</li> </ol> <pre><code>ansible -i inventory.ini trainingvms -m ping\n</code></pre> <ol> <li>Deploy PocketSOC using ansible playbook: </li> </ol> <pre><code>ansible-playbook -i inventory.ini pocketsoc-ng.yml --extra-vars \"@pocketsoc-ng_var.env\"\n</code></pre> <p>To stop </p> <pre><code>ansible-playbook -i inventory.ini pocketsoc-ng-stop.yml --extra-vars \"@pocketsoc-ng_var.env\"\n</code></pre> <p>If you want to have a fresh installation you need to run <code>./cleanup.sh</code> on the managed hosts for a clean start.</p> <p><code>./cleanup.sh</code> includes</p> <pre><code>sudo docker stop $(sudo docker ps -a -q)\ndocker stop portainer\ndocker container prune\ndocker volume rm portainer_data\n</code></pre>"},{"location":"Admin/deployment/#appendix-a","title":"APPENDIX A","text":"<p>Sample haproxy config for 40 training nodes</p> <pre><code>global\n    log /dev/log local0\n    log /dev/log local1 notice\n    maxconn 4096\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\n\nfrontend https_frontend\n    bind *:443 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40101-40103 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40201-40203 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40301-40303 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40401-40403 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40501-40503 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40601-40603 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40701-40703 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40801-40803 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:40901-40903 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41001-41003 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41101-41103 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41201-41203 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41301-41303 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41401-41403 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41501-41503 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41601-41603 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41701-41703 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41801-41803 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:41901-41903 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42001-42003 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42101-42103 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42201-42203 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42301-42303 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42401-42403 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42501-42503 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42601-42603 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42701-42703 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42801-42803 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:42901-42903 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43001-43003 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43101-43103 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43201-43203 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43301-43303 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43401-43403 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43501-43503 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43601-43603 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43701-43703 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43801-43803 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:43901-43903 ssl crt /opt/pocketsoc/certs/certificate.pem\n    bind *:44001-44003 ssl crt /opt/pocketsoc/certs/certificate.pem\n\n    acl portainer1 dst_port 40101\n    acl portainer2 dst_port 40201\n    acl portainer3 dst_port 40301\n    acl portainer4 dst_port 40401\n    acl portainer5 dst_port 40501\n    acl portainer6 dst_port 40601\n    acl portainer7 dst_port 40701\n    acl portainer8 dst_port 40801\n    acl portainer9 dst_port 40901\n    acl portainer10 dst_port 41001\n    acl portainer11 dst_port 41101\n    acl portainer12 dst_port 41201\n    acl portainer13 dst_port 41301\n    acl portainer14 dst_port 41401\n    acl portainer15 dst_port 41501\n    acl portainer16 dst_port 41601\n    acl portainer17 dst_port 41701\n    acl portainer18 dst_port 41801\n    acl portainer19 dst_port 41901\n    acl portainer20 dst_port 42001\n    acl portainer21 dst_port 42101\n    acl portainer22 dst_port 42201\n    acl portainer23 dst_port 42301\n    acl portainer24 dst_port 42401\n    acl portainer25 dst_port 42501\n    acl portainer26 dst_port 42601\n    acl portainer27 dst_port 42701\n    acl portainer28 dst_port 42801\n    acl portainer29 dst_port 42901\n    acl portainer30 dst_port 43001\n    acl portainer31 dst_port 43101\n    acl portainer32 dst_port 43201\n    acl portainer33 dst_port 43301\n    acl portainer34 dst_port 43401\n    acl portainer35 dst_port 43501\n    acl portainer36 dst_port 43601\n    acl portainer37 dst_port 43701\n    acl portainer38 dst_port 43801\n    acl portainer39 dst_port 43901\n    acl portainer40 dst_port 44001\n\n    acl opensearch1 dst_port 40102\n    acl opensearch2 dst_port 40202\n    acl opensearch3 dst_port 40302\n    acl opensearch4 dst_port 40402\n    acl opensearch5 dst_port 40502\n    acl opensearch6 dst_port 40602\n    acl opensearch7 dst_port 40702\n    acl opensearch8 dst_port 40802\n    acl opensearch9 dst_port 40902\n    acl opensearch10 dst_port 41002\n    acl opensearch11 dst_port 41102\n    acl opensearch12 dst_port 41202\n    acl opensearch13 dst_port 41302\n    acl opensearch14 dst_port 41402\n    acl opensearch15 dst_port 41502\n    acl opensearch16 dst_port 41602\n    acl opensearch17 dst_port 41702\n    acl opensearch18 dst_port 41802\n    acl opensearch19 dst_port 41902\n    acl opensearch20 dst_port 42002\n    acl opensearch21 dst_port 42102\n    acl opensearch22 dst_port 42202\n    acl opensearch23 dst_port 42302\n    acl opensearch24 dst_port 42402\n    acl opensearch25 dst_port 42502\n    acl opensearch26 dst_port 42602\n    acl opensearch27 dst_port 42702\n    acl opensearch28 dst_port 42802\n    acl opensearch29 dst_port 42902\n    acl opensearch30 dst_port 43002\n    acl opensearch31 dst_port 43102\n    acl opensearch32 dst_port 43202\n    acl opensearch33 dst_port 43302\n    acl opensearch34 dst_port 43402\n    acl opensearch35 dst_port 43502\n    acl opensearch36 dst_port 43602\n    acl opensearch37 dst_port 43702\n    acl opensearch38 dst_port 43802\n    acl opensearch39 dst_port 43902\n    acl opensearch40 dst_port 44002\n\n    acl misp1 dst_port 40103\n    acl misp2 dst_port 40203\n    acl misp3 dst_port 40303\n    acl misp4 dst_port 40403\n    acl misp5 dst_port 40503\n    acl misp6 dst_port 40603\n    acl misp7 dst_port 40703\n    acl misp8 dst_port 40803\n    acl misp9 dst_port 40903\n    acl misp10 dst_port 41003\n    acl misp11 dst_port 41103\n    acl misp12 dst_port 41203\n    acl misp13 dst_port 41303\n    acl misp14 dst_port 41403\n    acl misp15 dst_port 41503\n    acl misp16 dst_port 41603\n    acl misp17 dst_port 41703\n    acl misp18 dst_port 41803\n    acl misp19 dst_port 41903\n    acl misp20 dst_port 42003\n    acl misp21 dst_port 42103\n    acl misp22 dst_port 42203\n    acl misp23 dst_port 42303\n    acl misp24 dst_port 42403\n    acl misp25 dst_port 42503\n    acl misp26 dst_port 42603\n    acl misp27 dst_port 42703\n    acl misp28 dst_port 42803\n    acl misp29 dst_port 42903\n    acl misp30 dst_port 43003\n    acl misp31 dst_port 43103\n    acl misp32 dst_port 43203\n    acl misp33 dst_port 43303\n    acl misp34 dst_port 43403\n    acl misp35 dst_port 43503\n    acl misp36 dst_port 43603\n    acl misp37 dst_port 43703\n    acl misp38 dst_port 43803\n    acl misp39 dst_port 43903\n    acl misp40 dst_port 44003\n\n    use_backend portainer1 if portainer1\n    use_backend portainer2 if portainer2\n    use_backend portainer3 if portainer3\n    use_backend portainer4 if portainer4\n    use_backend portainer5 if portainer5\n    use_backend portainer6 if portainer6\n    use_backend portainer7 if portainer7\n    use_backend portainer8 if portainer8\n    use_backend portainer9 if portainer9\n    use_backend portainer10 if portainer10\n    use_backend portainer11 if portainer11\n    use_backend portainer12 if portainer12\n    use_backend portainer13 if portainer13\n    use_backend portainer14 if portainer14\n    use_backend portainer15 if portainer15\n    use_backend portainer16 if portainer16\n    use_backend portainer17 if portainer17\n    use_backend portainer18 if portainer18\n    use_backend portainer19 if portainer19\n    use_backend portainer20 if portainer20\n    use_backend portainer21 if portainer21\n    use_backend portainer22 if portainer22\n    use_backend portainer23 if portainer23\n    use_backend portainer24 if portainer24\n    use_backend portainer25 if portainer25\n    use_backend portainer26 if portainer26\n    use_backend portainer27 if portainer27\n    use_backend portainer28 if portainer28\n    use_backend portainer29 if portainer29\n    use_backend portainer30 if portainer30\n    use_backend portainer31 if portainer31\n    use_backend portainer32 if portainer32\n    use_backend portainer33 if portainer33\n    use_backend portainer34 if portainer34\n    use_backend portainer35 if portainer35\n    use_backend portainer36 if portainer36\n    use_backend portainer37 if portainer37\n    use_backend portainer38 if portainer38\n    use_backend portainer39 if portainer39\n    use_backend portainer40 if portainer40\n\n    use_backend opensearch1 if opensearch1\n    use_backend opensearch2 if opensearch2\n    use_backend opensearch3 if opensearch3\n    use_backend opensearch4 if opensearch4\n    use_backend opensearch5 if opensearch5\n    use_backend opensearch6 if opensearch6\n    use_backend opensearch7 if opensearch7\n    use_backend opensearch8 if opensearch8\n    use_backend opensearch9 if opensearch9\n    use_backend opensearch10 if opensearch10\n    use_backend opensearch11 if opensearch11\n    use_backend opensearch12 if opensearch12\n    use_backend opensearch13 if opensearch13\n    use_backend opensearch14 if opensearch14\n    use_backend opensearch15 if opensearch15\n    use_backend opensearch16 if opensearch16\n    use_backend opensearch17 if opensearch17\n    use_backend opensearch18 if opensearch18\n    use_backend opensearch19 if opensearch19\n    use_backend opensearch20 if opensearch20\n    use_backend opensearch21 if opensearch21\n    use_backend opensearch22 if opensearch22\n    use_backend opensearch23 if opensearch23\n    use_backend opensearch24 if opensearch24\n    use_backend opensearch25 if opensearch25\n    use_backend opensearch26 if opensearch26\n    use_backend opensearch27 if opensearch27\n    use_backend opensearch28 if opensearch28\n    use_backend opensearch29 if opensearch29\n    use_backend opensearch30 if opensearch30\n    use_backend opensearch31 if opensearch31\n    use_backend opensearch32 if opensearch32\n    use_backend opensearch33 if opensearch33\n    use_backend opensearch34 if opensearch34\n    use_backend opensearch35 if opensearch35\n    use_backend opensearch36 if opensearch36\n    use_backend opensearch37 if opensearch37\n    use_backend opensearch38 if opensearch38\n    use_backend opensearch39 if opensearch39\n    use_backend opensearch40 if opensearch40\n\n    use_backend misp1 if misp1\n    use_backend misp2 if misp2\n    use_backend misp3 if misp3\n    use_backend misp4 if misp4\n    use_backend misp5 if misp5\n    use_backend misp6 if misp6\n    use_backend misp7 if misp7\n    use_backend misp8 if misp8\n    use_backend misp9 if misp9\n    use_backend misp10 if misp10\n    use_backend misp11 if misp11\n    use_backend misp12 if misp12\n    use_backend misp13 if misp13\n    use_backend misp14 if misp14\n    use_backend misp15 if misp15\n    use_backend misp16 if misp16\n    use_backend misp17 if misp17\n    use_backend misp18 if misp18\n    use_backend misp19 if misp19\n    use_backend misp20 if misp20\n    use_backend misp21 if misp21\n    use_backend misp22 if misp22\n    use_backend misp23 if misp23\n    use_backend misp24 if misp24\n    use_backend misp25 if misp25\n    use_backend misp26 if misp26\n    use_backend misp27 if misp27\n    use_backend misp28 if misp28\n    use_backend misp29 if misp29\n    use_backend misp30 if misp30\n    use_backend misp31 if misp31\n    use_backend misp32 if misp32\n    use_backend misp33 if misp33\n    use_backend misp34 if misp34\n    use_backend misp35 if misp35\n    use_backend misp36 if misp36\n    use_backend misp37 if misp37\n    use_backend misp38 if misp38\n    use_backend misp39 if misp39\n    use_backend misp40 if misp40\n\ndefault_backend default\n\nbackend portainer1\n    server portainer_node1 &lt;NODE1_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer2\n    server portainer_node2 &lt;NODE2_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer3\n    server portainer_node3 &lt;NODE3_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer4\n    server portainer_node4 &lt;NODE4_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer5\n    server portainer_node5 &lt;NODE5_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer6\n    server portainer_node6 &lt;NODE6_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer7\n    server portainer_node7 &lt;NODE7_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer8\n    server portainer_node8 &lt;NODE8_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer9\n    server portainer_node9 &lt;NODE9_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer10\n    server portainer_node10 &lt;NODE10_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer11\n    server portainer_node11 &lt;NODE11_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer12\n    server portainer_node12 &lt;NODE12_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer13\n    server portainer_node13 &lt;NODE13_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer14\n    server portainer_node14 &lt;NODE14_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer15\n    server portainer_node15 &lt;NODE15_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer16\n    server portainer_node16 &lt;NODE16_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer17\n    server portainer_node17 &lt;NODE17_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer18\n    server portainer_node18 &lt;NODE18_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer19\n    server portainer_node19 &lt;NODE19_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer20\n    server portainer_node20 &lt;NODE20_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer21\n    server portainer_node21 &lt;NODE21_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer22\n    server portainer_node22 &lt;NODE22_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer23\n    server portainer_node23 &lt;NODE23_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer24\n    server portainer_node24 &lt;NODE24_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer25\n    server portainer_node25 &lt;NODE25_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer26\n    server portainer_node26 &lt;NODE26_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer27\n    server portainer_node27 &lt;NODE27_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer28\n    server portainer_node28 &lt;NODE28_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer29\n    server portainer_node29 &lt;NODE29_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer30\n    server portainer_node30 &lt;NODE30_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer31\n    server portainer_node31 &lt;NODE31_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer32\n    server portainer_node32 &lt;NODE32_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer33\n    server portainer_node33 &lt;NODE33_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer34\n    server portainer_node34 &lt;NODE34_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer35\n    server portainer_node35 &lt;NODE35_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer36\n    server portainer_node36 &lt;NODE36_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer37\n    server portainer_node37 &lt;NODE37_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer38\n    server portainer_node38 &lt;NODE38_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer39\n    server portainer_node39 &lt;NODE39_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer40\n    server portainer_node40 &lt;NODE40_FQDN&gt;:9443 check ssl verify none\n\nbackend opensearch1\n    server opensearch_node1 &lt;NODE1_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch2\n    server opensearch_node2 &lt;NODE2_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch3\n    server opensearch_node3 &lt;NODE3_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch4\n    server opensearch_node4 &lt;NODE4_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch5\n    server opensearch_node5 &lt;NODE5_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch6\n    server opensearch_node6 &lt;NODE6_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch7\n    server opensearch_node7 &lt;NODE7_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch8\n    server opensearch_node8 &lt;NODE8_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch9\n    server opensearch_node9 &lt;NODE9_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch10\n    server opensearch_node10 &lt;NODE10_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch11\n    server opensearch_node11 &lt;NODE11_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch12\n    server opensearch_node12 &lt;NODE12_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch13\n    server opensearch_node13 &lt;NODE13_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch14\n    server opensearch_node14 &lt;NODE14_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch15\n    server opensearch_node15 &lt;NODE15_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch16\n    server opensearch_node16 &lt;NODE16_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch17\n    server opensearch_node17 &lt;NODE17_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch18\n    server opensearch_node18 &lt;NODE18_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch19\n    server opensearch_node19 &lt;NODE19_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch20\n    server opensearch_node20 &lt;NODE20_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch21\n    server opensearch_node21 &lt;NODE21_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch22\n    server opensearch_node22 &lt;NODE22_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch23\n    server opensearch_node23 &lt;NODE23_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch24\n    server opensearch_node24 &lt;NODE24_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch25\n    server opensearch_node25 &lt;NODE25_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch26\n    server opensearch_node26 &lt;NODE26_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch27\n    server opensearch_node27 &lt;NODE27_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch28\n    server opensearch_node28 &lt;NODE28_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch29\n    server opensearch_node29 &lt;NODE29_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch30\n    server opensearch_node30 &lt;NODE30_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch31\n    server opensearch_node31 &lt;NODE31_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch32\n    server opensearch_node32 &lt;NODE32_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch33\n    server opensearch_node33 &lt;NODE33_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch34\n    server opensearch_node34 &lt;NODE34_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch35\n    server opensearch_node35 &lt;NODE35_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch36\n    server opensearch_node36 &lt;NODE36_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch37\n    server opensearch_node37 &lt;NODE37_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch38\n    server opensearch_node38 &lt;NODE38_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch39\n    server opensearch_node39 &lt;NODE39_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch40\n    server opensearch_node40 &lt;NODE40_FQDN&gt;:5601 check ssl verify none\n\nbackend misp1\n    server misp_node1 &lt;NODE1_FQDN&gt;:40103 check ssl verify none\n\nbackend misp2\n    server misp_node2 &lt;NODE2_FQDN&gt;:40203 check ssl verify none\n\nbackend misp3\n    server misp_node3 &lt;NODE3_FQDN&gt;:40303 check ssl verify none\n\nbackend misp4\n    server misp_node4 &lt;NODE4_FQDN&gt;:40403 check ssl verify none\n\nbackend misp5\n    server misp_node5 &lt;NODE5_FQDN&gt;:40503 check ssl verify none\n\nbackend misp6\n    server misp_node6 &lt;NODE6_FQDN&gt;:40603 check ssl verify none\n\nbackend misp7\n    server misp_node7 &lt;NODE7_FQDN&gt;:40703 check ssl verify none\n\nbackend misp8\n    server misp_node8 &lt;NODE8_FQDN&gt;:40803 check ssl verify none\n\nbackend misp9\n    server misp_node9 &lt;NODE9_FQDN&gt;:40903 check ssl verify none\n\nbackend misp10\n    server misp_node10 &lt;NODE10_FQDN&gt;:41003 check ssl verify none\n\nbackend misp11\n    server misp_node11 &lt;NODE11_FQDN&gt;:41103 check ssl verify none\n\nbackend misp12\n    server misp_node12 &lt;NODE12_FQDN&gt;:41203 check ssl verify none\n\nbackend misp13\n    server misp_node13 &lt;NODE13_FQDN&gt;:41303 check ssl verify none\n\nbackend misp14\n    server misp_node14 &lt;NODE14_FQDN&gt;:41403 check ssl verify none\n\nbackend misp15\n    server misp_node15 &lt;NODE15_FQDN&gt;:41503 check ssl verify none\n\nbackend misp16\n    server misp_node16 &lt;NODE16_FQDN&gt;:41603 check ssl verify none\n\nbackend misp17\n    server misp_node17 &lt;NODE17_FQDN&gt;:41703 check ssl verify none\n\nbackend misp18\n    server misp_node18 &lt;NODE18_FQDN&gt;:41803 check ssl verify none\n\nbackend misp19\n    server misp_node19 &lt;NODE19_FQDN&gt;:41903 check ssl verify none\n\nbackend misp20\n    server misp_node20 &lt;NODE20_FQDN&gt;:42003 check ssl verify none\n\nbackend misp21\n    server misp_node21 &lt;NODE21_FQDN&gt;:42103 check ssl verify none\n\nbackend misp22\n    server misp_node22 &lt;NODE22_FQDN&gt;:42203 check ssl verify none\n\nbackend misp23\n    server misp_node23 &lt;NODE23_FQDN&gt;:42303 check ssl verify none\n\nbackend misp24\n    server misp_node24 &lt;NODE24_FQDN&gt;:42403 check ssl verify none\n\nbackend misp25\n    server misp_node25 &lt;NODE25_FQDN&gt;:42503 check ssl verify none\n\nbackend misp26\n    server misp_node26 &lt;NODE26_FQDN&gt;:42603 check ssl verify none\n\nbackend misp27\n    server misp_node27 &lt;NODE27_FQDN&gt;:42703 check ssl verify none\n\nbackend misp28\n    server misp_node28 &lt;NODE28_FQDN&gt;:42803 check ssl verify none\n\nbackend misp29\n    server misp_node29 &lt;NODE29_FQDN&gt;:42903 check ssl verify none\n\nbackend misp30\n    server misp_node30 &lt;NODE30_FQDN&gt;:43003 check ssl verify none\n\nbackend misp31\n    server misp_node31 &lt;NODE31_FQDN&gt;:43103 check ssl verify none\n\nbackend misp32\n    server misp_node32 &lt;NODE32_FQDN&gt;:43203 check ssl verify none\n\nbackend misp33\n    server misp_node33 &lt;NODE33_FQDN&gt;:43303 check ssl verify none\n\nbackend misp34\n    server misp_node34 &lt;NODE34_FQDN&gt;:43403 check ssl verify none\n\nbackend misp35\n    server misp_node35 &lt;NODE35_FQDN&gt;:43503 check ssl verify none\n\nbackend misp36\n    server misp_node36 &lt;NODE36_FQDN&gt;:43603 check ssl verify none\n\nbackend misp37\n    server misp_node37 &lt;NODE37_FQDN&gt;:43703 check ssl verify none\n\nbackend misp38\n    server misp_node38 &lt;NODE38_FQDN&gt;:43803 check ssl verify none\n\nbackend misp39\n    server misp_node39 &lt;NODE39_FQDN&gt;:43903 check ssl verify none\n\nbackend misp40\n    server misp_node40 &lt;NODE40_FQDN&gt;:44003 check ssl verify none\n\nbackend default\n     http-request deny\n</code></pre>"},{"location":"Admin/design/","title":"Design Overview","text":"<p>This is how the PocketSOC architecture works:</p> <ul> <li>Everything is on a private network</li> <li> <p>Small amount of traffic: lets us focus on things that we trigger </p> </li> <li> <p>Main communication is between client and webserver</p> <ul> <li>The only command needed here on client is curl webserver</li> </ul> </li> <li> <p>Traffic is routed through router which mirrors it to zeek</p> </li> <li>Zeek runs in \"standalone\" mode, which uses one core for processing and reduces other complexity<ul> <li>good enough for our purposes!</li> <li>zeek here uses the pre-packaged CentOS9 binaries</li> </ul> </li> <li> <p>Zeek also runs filebeat which ships logs, in JSON format, to logstash</p> </li> <li> <p>Logstash then processes the logs and ships them to opensearch</p> </li> <li> <p>OpenSearch and OpenSearch dashboards use the basic example from opensearch.org</p> <ul> <li>Don't use in production!</li> </ul> </li> <li>Misp uses JISC docker deployment</li> </ul>"},{"location":"Admin/design/#architecture","title":"Architecture","text":"<p>The PocketSOC architecture includes several components:</p> <p></p>"},{"location":"Trainees/access/","title":"Access","text":"<ul> <li> <p>We have enough instances for you to work with.</p> </li> <li> <p>Each user is able to access their individual containers.</p> </li> <li> <p>The connection goes through the available proxy host, which then redirects you to the relevant application.</p> </li> <li> <p>Here's how you can access your applications:</p> <ul> <li>Suppose you have been assigned <code>node-1</code>.</li> <li> <p>To access Portainer, append the following to the URL:</p> <p><code>host-192-168-1-100.something.com:1001</code></p> </li> <li> <p>Similarily, to access OpenSearch, append the following to the URL:</p> <p><code>host-192-168-1-100.something.com:1002</code></p> </li> <li> <p>Finally, to access MISP, append the following to the URL: </p> <p><code>host-192-168-1-100.something.com:1003</code></p> </li> </ul> </li> <li> <p>If you have been assigned <code>node-2</code>, you will be using the ports <code>2001</code>, <code>2002</code>, <code>2003</code></p> </li> </ul>"},{"location":"Trainees/exercise_five/","title":"Exercise 5: Analyse traffic in OpenSearch Dashboards","text":"<p>We'll now look at the results of the processing of the traffic you just generated in Opensearch Dashboards.</p> <ol> <li>You should see a spike in traffic from the timestamp where you generated it; or, search for the webserver IP address.</li> <li>Note in the current build of this environment, zeek may not trigger the <code>file</code> or <code>http</code> analysis; otherwise you would also be able to see <code>zeek-file</code> and <code>zeek-http</code> types available with additional information - including the checksum of the file downloaded.</li> <li>Use the magnifying glass to explore the record for one of the connections</li> </ol>"},{"location":"Trainees/exercise_four/","title":"Exercise 4: Generate some traffic","text":"<p>The traffic you can see already is background - DNS requests, etc. We now want to generate some traffic of our own that we can identify</p> <ol> <li>In a Portainer tab, look for the client container and open a terminal</li> <li>Do a simple <code>curl</code> command to download a \"payload\" from our webserver <code>curl http://webserver -o payload</code></li> <li>Let's check the MD5 checksum of this file  <code>md5sum payload</code> </li> <li>This forms an extremely simple analysis, but gives us enough to go back to the Dashboards tab  </li> <li>Before continuing, take a note of the IP address of the webserver, <code>dig webserver</code> </li> <li>If you would like to pull benign data from an external source into another payload file, also take a note of the checksum that is generated  </li> </ol>"},{"location":"Trainees/exercise_one/","title":"Exercise 1: Portainer","text":"<p>In the first exercise, we'll explore the Portainer interface which acts as the orchestrator for this environment. </p> <ol> <li>Open a new window or tab using the link on the front page of these notes to open Portainer, and login with the credentials provided </li> <li>The main page you're presented with should look something like this, click on <code>local</code> environment  </li> <li>Click where it says <code>2 Stacks</code> </li> <li>Click on <code>pocketsoc-ng</code> </li> <li>If you scroll down the page, you'll see a list of containers </li> <li>To access the terminal for a given container, click on the <code>&gt;_</code> icon </li> <li>Explore the rest of the interface, which gives information on the deployment. You can always get back to the list of containers through the <code>Containers</code> link or <code>Stacks</code> followed by <code>pocketsoc-ng</code> as above</li> </ol>"},{"location":"Trainees/exercise_six/","title":"Exercise 6: MISP","text":"<p>Having generated some logs using zeek, we're now going to explore MISP.</p> <ol> <li>Use the link and credentials on the front page to access your MISP website </li> <li>You should see an \"Events\" page that's blank </li> <li>If you click on Automation at the bottom of the list of options on the left-hand side, you can find a very detailed set of docs on the API access for MISP. This includes a copy of your API key, so in general be careful when opening this page!</li> <li>For reference, if you wanted to sync to another instance, you would use the \"Remote Servers\" option under \"Sync Actions\" - if you have a look at this, click \"Home\" to get back to the main screen </li> <li>Before we create an event, we want to make sure that all our events will have a TLP setting. Go to \"Event Actions\" and select \"Taxonomies\" </li> <li>We want to require TLP and also highlight it: this will make it easier to select when creating an event. Click these two options for TLP and then the \"Play\" icon to enable (mousing over will confirm which icon to use): click OK to confirm. Then click \"enable all\" to enable all the tlp options. </li> <li>Let's now explore the \"add event\" option: this will allow us to generate an event based on the findings of our \"malicious\" webserver </li> <li>There are a number of options here: let's look at them:<ul> <li>Date: Set the date to when the event is being recorded or occurred</li> <li>Distribution:<ul> <li>Your organisation only: will not be shared outside this instance</li> <li>This community only: will only be shared with instances in your community</li> <li>Connected communities: will be shared with any communities connected to yours but no further</li> <li>All communities: will be shared with any MISP instance any number of hops from you</li> </ul> </li> <li>Threat level: severity of the event</li> <li>Analysis: allows you to specify whether these are your initial findings, part way through an extended analysis, or form the completed version of your findings</li> <li>Event Info: A brief description of the event</li> <li>Extends Event: Not used for a new incident, but could be used if you are basing your findings on another event</li> </ul> </li> <li>For Distribution, this can typically be used to set how far your event will be propagated: for our purposes we can stick with \"Your Organisation only\"</li> <li>Enter some explanatory text and options, and click \"Submit\". You will see some metadata about this event, with some useful warnings about things you may want to add to your event, like attributes! </li> <li>We're going to start by adding a TLP tag to our event to indicate the sharing level: this is good practice so that it's always clear which is why we have required it for all of our events.  </li> <li>We're going to use <code>tlp:amber</code>: choose from the dropdown and Submit.</li> <li>If you scroll down, you'll see another warning that we haven't included any attributes, so let's add some now.</li> <li>Good practice is, rather than adding individual attributes, to add objects. These allow you to add a set of related attributes - such as all the information about a file, for example, or all information about a URL or domain. </li> <li>We'll start by adding a \"network\" object. Go to Add Object, and start typing \"network\". Click on that option and you'll see another option dropdown - start typing \"domain\" and choose \"domain:ip\" </li> <li>This page lets us fill in all the information we have about given domain/ip. We can add:<ul> <li>IP: (the IP you identified earlier)</li> <li>You might also add first seen/last seen as today</li> </ul> </li> <li>It's good practice to put comments wherever you have the option to, so add comments both to the object itself and the individual attributes, then click Submit. You'll see a review of the information, then click \"Create new object\" if you're happy. MISP will attempt to validate your entries; if it finds an issue it will alert you before you can proceed. </li> <li>You can now see the attributes in the main event page. Note that MISP has highlighted the date in red as these attributes have not been \"published\" yet; i.e. it will not be propagated to sharing groups, and the attributes will not be available via the API </li> <li>MISP uses the idea of working on an \"unpublished\" event until it has been completed to a certain level: the full results of an initial analysis, for example, or attributes that have not been reviewed by a user with the rights to publish. This means that a team can work on an event safe in the knowledge that the attributes will not be published until a team leader, for example, has provided a cross check.</li> <li>To publish, click \"Publish no email\" on the left hand side. While we would normally inform users of a new event, we have no other users.</li> <li>If you return to the home screen and select the event again, you'll see that the dates attached to the attributes are no longer highlighted since the event has been published.</li> <li>You can also add additional objects - for example look for the \"file\" objects where you can add checksums and other file details.</li> </ol>"},{"location":"Trainees/exercise_three/","title":"Exercise 3: Explore the data","text":"<p>We want to narrow down the set of information being shown; by default, each record shows the full message being sent from zeek </p> <ol> <li>To set the data to live update, click the calendar icon at the top </li> <li>Set to refresh every 10 seconds (say) </li> <li>Under available fields on the left hand side, scroll and select <code>id.orig_h</code>, <code>id.resp_h</code>. What do these refer to?</li> <li>Most of the IPs will start <code>172.[].[].[]</code> - these are the private addresses being used in the environment. You might see other IPs - these will be most likely other addresses: you can check using <code>dig -x [].[].[].[]</code> on <code>lxplus</code>, for example</li> <li>Scroll through the other fields to see what is available, then add <code>type</code>: what types of data are being captured?</li> <li>Click on the arrow on the left hand side of a record to see a full readout of the information collected  </li> </ol> <p> 7. Compare the outputs for different type of zeek log using the <code>type</code> filter in opensearch dashboards </p>"},{"location":"Trainees/exercise_two/","title":"Exercise 2: OpenSearch","text":"<p>In this exercise, we'll setup the OpenSearch Dashboards interface. If you're familiar with OpenSearch Dashboards then feel free to skip ahead, otherwise follow these steps - this is a fresh installation.</p> <ol> <li>Log in using the credentials on the front page </li> <li>Select \"Explore on my own\" (Zeek will provide the data!) </li> <li>Dismiss the \"new Dashboards\" notice </li> <li>Confirm \"private tenant\" </li> <li>You should see this view </li> <li>Click the three bar menu in the top left and select \u201cDiscover\u201d </li> <li>Now we need to create an index pattern to select which records to display. Click on \u201cCreate index pattern\u201d </li> <li>You should see something like the following, with <code>opensearch-logstash-zeek-2023.10.12</code> </li> <li>Enter <code>opensearch-logstash-zeek-*</code> (this will match multiple days): Next step. </li> <li>Select @timestamp in the Time field </li> <li>You should see something like this </li> <li>From the menu select Discover again: at the top left of the window you\u2019ll see \u201cSelect a datasource\u201d : choose the index pattern you just created </li> <li>You should see some data: time to explore! </li> </ol>"}]}